// Module1.idl : IDL source for Module1
//

// This file will be processed by the MIDL tool to
// produce the type library (Module1.tlb) and marshalling code.

#include "mtxattr.h"
import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(FF1B7318-DC50-44C2-8898-818DED484CA5),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ITCPCMU1 : IDispatch{
	[id(1)] HRESULT ConnectTo([in] DWORD u32_ServIP, [in] USHORT u16_Port, DWORD u32_EventTimeout, [in] DWORD u32_MaxIdeTime);
	[id(2)] HRESULT SendTo([in] DWORD hSocket, [in] CHAR* s8_SendBuf, [in] DWORD u32_Len);
	[id(3)] HRESULT DisconnectClient();
	[id(4)] HRESULT ProcessEvents([in]HWND hwnd, [in]unsigned int msg);
	[id(5)] HRESULT Initialize(void);
	[propget, id(6)] HRESULT blobData([out, retval] BSTR* pVal);
	[propput, id(6)] HRESULT blobData([in] BSTR newVal);
	[propget, id(7)] HRESULT PDCBinData([out, retval] BSTR* pVal);
	[propput, id(7)] HRESULT PDCBinData([in] BSTR newVal);
	[id(8)] HRESULT HeaderFrame(void);
	[id(9)] HRESULT Disable(void);
	[propget, id(10)] HRESULT SocketName([out, retval] BSTR* pVal);
	[propput, id(10)] HRESULT SocketName([in] BSTR newVal);
	[id(11)] HRESULT FindSocket([in] BSTR SockName);
//	[propget, id(12)] HRESULT SYNC([out, retval] USHORT* pVal);
//	[propput, id(12)] HRESULT SYNC([in] USHORT newVal);
	[propget, id(12)] HRESULT SYNC1([out, retval] unsigned char* pVal);
	[propput, id(12)] HRESULT SYNC1([in] unsigned char newVal);
	[propget, id(13)] HRESULT SYNC2([out, retval] unsigned char* pVal);
	[propput, id(13)] HRESULT SYNC2([in] unsigned char newVal);
	[propget, id(14)] HRESULT IDCode([out, retval] USHORT* pVal);
	[propput, id(14)] HRESULT IDCode([in] USHORT newVal);
	[id(15), local] HRESULT ProcessEventsRT([in] HWND hwnd, [in] unsigned int msg, [in]HANDLE hEventRT);
//	[propget, id(16)] HRESULT SkipSteps4RT([out, retval] USHORT* pVal);
//	[propput, id(16)] HRESULT SkipSteps4RT([in] USHORT newVal);
	[propget, id(16)] HRESULT SkipSteps4RT([out, retval] USHORT* pVal);
	[propput, id(16)] HRESULT SkipSteps4RT([in] USHORT newVal);
	[id(17)] HRESULT ContinuePacketReading(void);
	[propget, id(18)] HRESULT PhMagAng([out, retval] ULONG* pVal);
	[propput, id(18)] HRESULT PhMagAng([in] ULONG newVal);
	[propget, id(19)] HRESULT PhNumber([out, retval] ULONG* pVal);
	[propput, id(19)] HRESULT PhNumber([in] ULONG newVal);
	[id(20)] HRESULT InsertPhPosType(void);
	[propget, id(21)] HRESULT PMUCount([out, retval] ULONG* pVal);
	[propput, id(21)] HRESULT PMUCount([in] ULONG newVal);
	[id(22)] HRESULT ClearDecodeVector(void);
	[propget, id(23)] HRESULT AnalogNumber([out, retval] ULONG* pVal);
	[propput, id(23)] HRESULT AnalogNumber([in] ULONG newVal);
	[propget, id(24)] HRESULT DigitalNumber([out, retval] ULONG* pVal);
	[propput, id(24)] HRESULT DigitalNumber([in] ULONG newVal);
	[id(25)] HRESULT InsertAnaPosType(void);
	[propget, id(26)] HRESULT ADPMUCount([out, retval] ULONG* pVal);
	[propput, id(26)] HRESULT ADPMUCount([in] ULONG newVal);
	[id(27)] HRESULT FindNoofchAD([in,out] ULONG* pu32_NoofchAD);
	[propget, id(28)] HRESULT LogFilNm([out, retval] BSTR* pVal);
	[propput, id(28)] HRESULT LogFilNm([in] BSTR newVal);
	[propget, id(29)] HRESULT PhDecSize([out, retval] ULONG* pVal);
	[propput, id(29)] HRESULT PhDecSize([in] ULONG newVal);
	[propget, id(30)] HRESULT NoofChAnalog([out, retval] ULONG* pVal);
	[propput, id(30)] HRESULT NoofChAnalog([in] ULONG newVal);
	[propget, id(31)] HRESULT NoofChDigital([out, retval] ULONG* pVal);
	[propput, id(31)] HRESULT NoofChDigital([in] ULONG newVal);
	[propget, id(32)] HRESULT NumAnalogs([out, retval] LONG* pVal);
	[propput, id(32)] HRESULT NumAnalogs([in] LONG newVal);
	[propget, id(33)] HRESULT NumDigitals([out, retval] ULONG* pVal);
	[propput, id(33)] HRESULT NumDigitals([in] ULONG newVal);
	[id(34)] HRESULT FindTotalNoofPhasors(ULONG* pu32_PHRCount);
	[id(35)] HRESULT AddAnalogCh(void);
	[id(36)] HRESULT AddDigitalNumber(void);
	[propget, id(37)] HRESULT RefreshRate([out, retval] ULONG* pVal);
	[propput, id(37)] HRESULT RefreshRate([in] ULONG newVal);
};
[
	object,
	uuid(EDBF4848-C736-48BC-9A7B-1069E7999D1B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IPDCDMU1 : IDispatch{
	[id(1)] HRESULT InsertPHMAN([in] USHORT U16_PMUIndex, [in] BSTR bstrPHMAN);
};
[
	uuid(28CFEA3F-F584-4B18-98C2-133866B34A11),
	version(1.0),
]
library Module1Lib
{
	importlib("stdole2.tlb");
	[		
		custom(TLBATTR_TRANS_REQUIRED,0),
		uuid(F078F7E5-3A93-497F-9E3F-8EECC8D1AF61)		
	]
	coclass TCPCMU1
	{
		[default] interface ITCPCMU1;
	};
	[		
		custom(TLBATTR_TRANS_REQUIRED,0),
		uuid(36D010D4-EA2E-4E55-B0BD-0DE9D475A8F3)		
	]
	coclass PDCDMU1
	{
		[default] interface IPDCDMU1;
	};
};

